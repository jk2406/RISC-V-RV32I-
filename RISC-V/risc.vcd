$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
  $var wire 1 +! clk $end
  $var wire 1 ,! rst_n $end
  $var wire 32 -! pc_out [31:0] $end
 $upscope $end
 $scope module riscv_pipelined $end
  $var wire 32 1! XLEN [31:0] $end
  $var wire 32 2! IMEM_WORDS [31:0] $end
  $var wire 32 2! DMEM_WORDS [31:0] $end
  $var wire 1 +! clk $end
  $var wire 1 ,! rst_n $end
  $var wire 32 -! pc_out [31:0] $end
  $var wire 32 = regs[0] [31:0] $end
  $var wire 32 > regs[1] [31:0] $end
  $var wire 32 ? regs[2] [31:0] $end
  $var wire 32 @ regs[3] [31:0] $end
  $var wire 32 A regs[4] [31:0] $end
  $var wire 32 B regs[5] [31:0] $end
  $var wire 32 C regs[6] [31:0] $end
  $var wire 32 D regs[7] [31:0] $end
  $var wire 32 E regs[8] [31:0] $end
  $var wire 32 F regs[9] [31:0] $end
  $var wire 32 G regs[10] [31:0] $end
  $var wire 32 H regs[11] [31:0] $end
  $var wire 32 I regs[12] [31:0] $end
  $var wire 32 J regs[13] [31:0] $end
  $var wire 32 K regs[14] [31:0] $end
  $var wire 32 L regs[15] [31:0] $end
  $var wire 32 M regs[16] [31:0] $end
  $var wire 32 N regs[17] [31:0] $end
  $var wire 32 O regs[18] [31:0] $end
  $var wire 32 P regs[19] [31:0] $end
  $var wire 32 Q regs[20] [31:0] $end
  $var wire 32 R regs[21] [31:0] $end
  $var wire 32 S regs[22] [31:0] $end
  $var wire 32 T regs[23] [31:0] $end
  $var wire 32 U regs[24] [31:0] $end
  $var wire 32 V regs[25] [31:0] $end
  $var wire 32 W regs[26] [31:0] $end
  $var wire 32 X regs[27] [31:0] $end
  $var wire 32 Y regs[28] [31:0] $end
  $var wire 32 Z regs[29] [31:0] $end
  $var wire 32 [ regs[30] [31:0] $end
  $var wire 32 \ regs[31] [31:0] $end
  $var wire 32 # pc [31:0] $end
  $var wire 32 ] if_id_instr [31:0] $end
  $var wire 32 $ if_id_pc [31:0] $end
  $var wire 32 % id_ex_instr [31:0] $end
  $var wire 32 & id_ex_pc [31:0] $end
  $var wire 32 ' id_ex_rdata1 [31:0] $end
  $var wire 32 ( id_ex_rdata2 [31:0] $end
  $var wire 32 ) id_ex_imm [31:0] $end
  $var wire 4 * id_ex_alu_op [3:0] $end
  $var wire 1 ^ id_ex_reg_we $end
  $var wire 1 + id_ex_is_load $end
  $var wire 1 _ id_ex_is_store $end
  $var wire 1 , id_ex_is_branch $end
  $var wire 1 - id_ex_is_jal $end
  $var wire 1 . id_ex_is_jalr $end
  $var wire 1 / id_ex_is_rtype $end
  $var wire 1 0 id_ex_is_itype_alu $end
  $var wire 5 1 id_ex_rs1 [4:0] $end
  $var wire 5 2 id_ex_rs2 [4:0] $end
  $var wire 5 ` id_ex_rd [4:0] $end
  $var wire 32 3 ex_mem_pc_plus_4 [31:0] $end
  $var wire 32 a ex_mem_alu_out [31:0] $end
  $var wire 32 b ex_mem_wdata [31:0] $end
  $var wire 5 c ex_mem_rd [4:0] $end
  $var wire 1 d ex_mem_reg_we $end
  $var wire 1 e ex_mem_mem_we $end
  $var wire 1 4 ex_mem_is_load $end
  $var wire 1 5 ex_mem_is_jal $end
  $var wire 32 6 mem_wb_alu_out [31:0] $end
  $var wire 32 7 mem_wb_mem_rdata [31:0] $end
  $var wire 32 8 mem_wb_pc_plus_4 [31:0] $end
  $var wire 5 f mem_wb_rd [4:0] $end
  $var wire 1 g mem_wb_reg_we $end
  $var wire 1 9 mem_wb_is_load $end
  $var wire 1 : mem_wb_is_jal $end
  $var wire 2 h forward_a [1:0] $end
  $var wire 2 i forward_b [1:0] $end
  $var wire 1 j pc_stall $end
  $var wire 1 k id_ex_bubble $end
  $var wire 1 l ex_branch_taken $end
  $var wire 32 m ex_branch_target [31:0] $end
  $var wire 4 3! ALU_ADD [3:0] $end
  $var wire 4 4! ALU_SUB [3:0] $end
  $var wire 4 5! ALU_SLL [3:0] $end
  $var wire 4 6! ALU_SLT [3:0] $end
  $var wire 4 7! ALU_SLTU [3:0] $end
  $var wire 4 8! ALU_XOR [3:0] $end
  $var wire 4 9! ALU_SRL [3:0] $end
  $var wire 4 :! ALU_SRA [3:0] $end
  $var wire 4 ;! ALU_OR [3:0] $end
  $var wire 4 <! ALU_AND [3:0] $end
  $var wire 32 ; instr_if [31:0] $end
  $var wire 7 n id_opcode [6:0] $end
  $var wire 5 o id_rd [4:0] $end
  $var wire 3 p id_funct3 [2:0] $end
  $var wire 5 q id_rs1 [4:0] $end
  $var wire 5 r id_rs2 [4:0] $end
  $var wire 7 s id_funct7 [6:0] $end
  $var wire 32 .! id_rdata1 [31:0] $end
  $var wire 32 /! id_rdata2 [31:0] $end
  $var wire 32 t id_imm_i [31:0] $end
  $var wire 32 u id_imm_s [31:0] $end
  $var wire 32 v id_imm_u_shifted [31:0] $end
  $var wire 32 w id_imm_b [31:0] $end
  $var wire 32 x id_imm_j [31:0] $end
  $var wire 1 y id_reg_we $end
  $var wire 1 z id_is_load $end
  $var wire 1 { id_is_store $end
  $var wire 1 | id_is_branch $end
  $var wire 1 } id_is_jal $end
  $var wire 1 ~ id_is_jalr $end
  $var wire 1 !! id_is_rtype $end
  $var wire 1 "! id_is_itype_alu $end
  $var wire 4 #! id_alu_op [3:0] $end
  $var wire 32 $! ex_fwd_data_mem_wb [31:0] $end
  $var wire 32 a ex_fwd_data_ex_mem [31:0] $end
  $var wire 32 %! ex_alu_a_fwd [31:0] $end
  $var wire 32 &! ex_alu_b_fwd [31:0] $end
  $var wire 32 '! ex_alu_a [31:0] $end
  $var wire 32 (! ex_alu_b [31:0] $end
  $var wire 32 )! ex_alu_out [31:0] $end
  $var wire 1 *! branch_condition_met $end
  $var wire 3 < funct3 [2:0] $end
  $var wire 32 0! mem_dmem_rdata [31:0] $end
  $var wire 32 $! wb_data [31:0] $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b0000 *
0+
0,
0-
0.
0/
00
b00000 1
b00000 2
b00000000000000000000000000000000 3
04
05
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
09
0:
b00000000000000000000000000000000 ;
b000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
0^
0_
b00000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000 c
0d
0e
b00000 f
0g
b00 h
b00 i
0j
0k
0l
b00000000000000000000000000000100 m
b0000000 n
b00000 o
b000 p
b00000 q
b00000 r
b0000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
0y
0z
0{
0|
0}
0~
0!!
0"!
b0000 #!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
b00000000000000000000000000000000 &!
b00000000000000000000000000000000 '!
b00000000000000000000000000000000 (!
b00000000000000000000000000000000 )!
0*!
0+!
0,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
b00000000000000000000000000000000 /!
b00000000000000000000000000000000 0!
b00000000000000000000000000100000 1!
b00000000000000000000010000000000 2!
b0000 3!
b0001 4!
b0010 5!
b0011 6!
b0100 7!
b0101 8!
b0110 9!
b0111 :!
b1000 ;!
b1001 <!
